// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.1
// source: biscuit.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublicKey_Algorithm int32

const (
	PublicKey_Ed25519   PublicKey_Algorithm = 0
	PublicKey_SECP256R1 PublicKey_Algorithm = 1
)

// Enum value maps for PublicKey_Algorithm.
var (
	PublicKey_Algorithm_name = map[int32]string{
		0: "Ed25519",
		1: "SECP256R1",
	}
	PublicKey_Algorithm_value = map[string]int32{
		"Ed25519":   0,
		"SECP256R1": 1,
	}
)

func (x PublicKey_Algorithm) Enum() *PublicKey_Algorithm {
	p := new(PublicKey_Algorithm)
	*p = x
	return p
}

func (x PublicKey_Algorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicKey_Algorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[0].Descriptor()
}

func (PublicKey_Algorithm) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[0]
}

func (x PublicKey_Algorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PublicKey_Algorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PublicKey_Algorithm(num)
	return nil
}

// Deprecated: Use PublicKey_Algorithm.Descriptor instead.
func (PublicKey_Algorithm) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{3, 0}
}

type Scope_ScopeType int32

const (
	Scope_Authority Scope_ScopeType = 0
	Scope_Previous  Scope_ScopeType = 1
)

// Enum value maps for Scope_ScopeType.
var (
	Scope_ScopeType_name = map[int32]string{
		0: "Authority",
		1: "Previous",
	}
	Scope_ScopeType_value = map[string]int32{
		"Authority": 0,
		"Previous":  1,
	}
)

func (x Scope_ScopeType) Enum() *Scope_ScopeType {
	p := new(Scope_ScopeType)
	*p = x
	return p
}

func (x Scope_ScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scope_ScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[1].Descriptor()
}

func (Scope_ScopeType) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[1]
}

func (x Scope_ScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Scope_ScopeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Scope_ScopeType(num)
	return nil
}

// Deprecated: Use Scope_ScopeType.Descriptor instead.
func (Scope_ScopeType) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{6, 0}
}

type Check_Kind int32

const (
	Check_One    Check_Kind = 0
	Check_All    Check_Kind = 1
	Check_Reject Check_Kind = 2
)

// Enum value maps for Check_Kind.
var (
	Check_Kind_name = map[int32]string{
		0: "One",
		1: "All",
		2: "Reject",
	}
	Check_Kind_value = map[string]int32{
		"One":    0,
		"All":    1,
		"Reject": 2,
	}
)

func (x Check_Kind) Enum() *Check_Kind {
	p := new(Check_Kind)
	*p = x
	return p
}

func (x Check_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Check_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[2].Descriptor()
}

func (Check_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[2]
}

func (x Check_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Check_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Check_Kind(num)
	return nil
}

// Deprecated: Use Check_Kind.Descriptor instead.
func (Check_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{9, 0}
}

type OpUnary_Kind int32

const (
	OpUnary_Negate OpUnary_Kind = 0
	OpUnary_Parens OpUnary_Kind = 1
	OpUnary_Length OpUnary_Kind = 2
	OpUnary_TypeOf OpUnary_Kind = 3
	OpUnary_Ffi    OpUnary_Kind = 4
)

// Enum value maps for OpUnary_Kind.
var (
	OpUnary_Kind_name = map[int32]string{
		0: "Negate",
		1: "Parens",
		2: "Length",
		3: "TypeOf",
		4: "Ffi",
	}
	OpUnary_Kind_value = map[string]int32{
		"Negate": 0,
		"Parens": 1,
		"Length": 2,
		"TypeOf": 3,
		"Ffi":    4,
	}
)

func (x OpUnary_Kind) Enum() *OpUnary_Kind {
	p := new(OpUnary_Kind)
	*p = x
	return p
}

func (x OpUnary_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpUnary_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[3].Descriptor()
}

func (OpUnary_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[3]
}

func (x OpUnary_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpUnary_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpUnary_Kind(num)
	return nil
}

// Deprecated: Use OpUnary_Kind.Descriptor instead.
func (OpUnary_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{19, 0}
}

type OpBinary_Kind int32

const (
	OpBinary_LessThan              OpBinary_Kind = 0
	OpBinary_GreaterThan           OpBinary_Kind = 1
	OpBinary_LessOrEqual           OpBinary_Kind = 2
	OpBinary_GreaterOrEqual        OpBinary_Kind = 3
	OpBinary_Equal                 OpBinary_Kind = 4
	OpBinary_Contains              OpBinary_Kind = 5
	OpBinary_Prefix                OpBinary_Kind = 6
	OpBinary_Suffix                OpBinary_Kind = 7
	OpBinary_Regex                 OpBinary_Kind = 8
	OpBinary_Add                   OpBinary_Kind = 9
	OpBinary_Sub                   OpBinary_Kind = 10
	OpBinary_Mul                   OpBinary_Kind = 11
	OpBinary_Div                   OpBinary_Kind = 12
	OpBinary_And                   OpBinary_Kind = 13
	OpBinary_Or                    OpBinary_Kind = 14
	OpBinary_Intersection          OpBinary_Kind = 15
	OpBinary_Union                 OpBinary_Kind = 16
	OpBinary_BitwiseAnd            OpBinary_Kind = 17
	OpBinary_BitwiseOr             OpBinary_Kind = 18
	OpBinary_BitwiseXor            OpBinary_Kind = 19
	OpBinary_NotEqual              OpBinary_Kind = 20
	OpBinary_HeterogeneousEqual    OpBinary_Kind = 21
	OpBinary_HeterogeneousNotEqual OpBinary_Kind = 22
	OpBinary_LazyAnd               OpBinary_Kind = 23
	OpBinary_LazyOr                OpBinary_Kind = 24
	OpBinary_All                   OpBinary_Kind = 25
	OpBinary_Any                   OpBinary_Kind = 26
	OpBinary_Get                   OpBinary_Kind = 27
	OpBinary_Ffi                   OpBinary_Kind = 28
	OpBinary_TryOr                 OpBinary_Kind = 29
)

// Enum value maps for OpBinary_Kind.
var (
	OpBinary_Kind_name = map[int32]string{
		0:  "LessThan",
		1:  "GreaterThan",
		2:  "LessOrEqual",
		3:  "GreaterOrEqual",
		4:  "Equal",
		5:  "Contains",
		6:  "Prefix",
		7:  "Suffix",
		8:  "Regex",
		9:  "Add",
		10: "Sub",
		11: "Mul",
		12: "Div",
		13: "And",
		14: "Or",
		15: "Intersection",
		16: "Union",
		17: "BitwiseAnd",
		18: "BitwiseOr",
		19: "BitwiseXor",
		20: "NotEqual",
		21: "HeterogeneousEqual",
		22: "HeterogeneousNotEqual",
		23: "LazyAnd",
		24: "LazyOr",
		25: "All",
		26: "Any",
		27: "Get",
		28: "Ffi",
		29: "TryOr",
	}
	OpBinary_Kind_value = map[string]int32{
		"LessThan":              0,
		"GreaterThan":           1,
		"LessOrEqual":           2,
		"GreaterOrEqual":        3,
		"Equal":                 4,
		"Contains":              5,
		"Prefix":                6,
		"Suffix":                7,
		"Regex":                 8,
		"Add":                   9,
		"Sub":                   10,
		"Mul":                   11,
		"Div":                   12,
		"And":                   13,
		"Or":                    14,
		"Intersection":          15,
		"Union":                 16,
		"BitwiseAnd":            17,
		"BitwiseOr":             18,
		"BitwiseXor":            19,
		"NotEqual":              20,
		"HeterogeneousEqual":    21,
		"HeterogeneousNotEqual": 22,
		"LazyAnd":               23,
		"LazyOr":                24,
		"All":                   25,
		"Any":                   26,
		"Get":                   27,
		"Ffi":                   28,
		"TryOr":                 29,
	}
)

func (x OpBinary_Kind) Enum() *OpBinary_Kind {
	p := new(OpBinary_Kind)
	*p = x
	return p
}

func (x OpBinary_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpBinary_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[4].Descriptor()
}

func (OpBinary_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[4]
}

func (x OpBinary_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpBinary_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpBinary_Kind(num)
	return nil
}

// Deprecated: Use OpBinary_Kind.Descriptor instead.
func (OpBinary_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{20, 0}
}

type Policy_Kind int32

const (
	Policy_Allow Policy_Kind = 0
	Policy_Deny  Policy_Kind = 1
)

// Enum value maps for Policy_Kind.
var (
	Policy_Kind_name = map[int32]string{
		0: "Allow",
		1: "Deny",
	}
	Policy_Kind_value = map[string]int32{
		"Allow": 0,
		"Deny":  1,
	}
)

func (x Policy_Kind) Enum() *Policy_Kind {
	p := new(Policy_Kind)
	*p = x
	return p
}

func (x Policy_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[5].Descriptor()
}

func (Policy_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[5]
}

func (x Policy_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Policy_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Policy_Kind(num)
	return nil
}

// Deprecated: Use Policy_Kind.Descriptor instead.
func (Policy_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{22, 0}
}

type Biscuit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RootKeyId     *uint32                `protobuf:"varint,1,opt,name=rootKeyId" json:"rootKeyId,omitempty"`
	Authority     *SignedBlock           `protobuf:"bytes,2,req,name=authority" json:"authority,omitempty"`
	Blocks        []*SignedBlock         `protobuf:"bytes,3,rep,name=blocks" json:"blocks,omitempty"`
	Proof         *Proof                 `protobuf:"bytes,4,req,name=proof" json:"proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Biscuit) Reset() {
	*x = Biscuit{}
	mi := &file_biscuit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Biscuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Biscuit) ProtoMessage() {}

func (x *Biscuit) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Biscuit.ProtoReflect.Descriptor instead.
func (*Biscuit) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{0}
}

func (x *Biscuit) GetRootKeyId() uint32 {
	if x != nil && x.RootKeyId != nil {
		return *x.RootKeyId
	}
	return 0
}

func (x *Biscuit) GetAuthority() *SignedBlock {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *Biscuit) GetBlocks() []*SignedBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *Biscuit) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type SignedBlock struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Block             []byte                 `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	NextKey           *PublicKey             `protobuf:"bytes,2,req,name=nextKey" json:"nextKey,omitempty"`
	Signature         []byte                 `protobuf:"bytes,3,req,name=signature" json:"signature,omitempty"`
	ExternalSignature *ExternalSignature     `protobuf:"bytes,4,opt,name=externalSignature" json:"externalSignature,omitempty"`
	Version           *uint32                `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SignedBlock) Reset() {
	*x = SignedBlock{}
	mi := &file_biscuit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBlock) ProtoMessage() {}

func (x *SignedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBlock.ProtoReflect.Descriptor instead.
func (*SignedBlock) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{1}
}

func (x *SignedBlock) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *SignedBlock) GetNextKey() *PublicKey {
	if x != nil {
		return x.NextKey
	}
	return nil
}

func (x *SignedBlock) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedBlock) GetExternalSignature() *ExternalSignature {
	if x != nil {
		return x.ExternalSignature
	}
	return nil
}

func (x *SignedBlock) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type ExternalSignature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signature     []byte                 `protobuf:"bytes,1,req,name=signature" json:"signature,omitempty"`
	PublicKey     *PublicKey             `protobuf:"bytes,2,req,name=publicKey" json:"publicKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalSignature) Reset() {
	*x = ExternalSignature{}
	mi := &file_biscuit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalSignature) ProtoMessage() {}

func (x *ExternalSignature) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalSignature.ProtoReflect.Descriptor instead.
func (*ExternalSignature) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ExternalSignature) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type PublicKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     *PublicKey_Algorithm   `protobuf:"varint,1,req,name=algorithm,enum=biscuit.format.schema.PublicKey_Algorithm" json:"algorithm,omitempty"`
	Key           []byte                 `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	mi := &file_biscuit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{3}
}

func (x *PublicKey) GetAlgorithm() PublicKey_Algorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return PublicKey_Ed25519
}

func (x *PublicKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Proof struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*Proof_NextSecret
	//	*Proof_FinalSignature
	Content       isProof_Content `protobuf_oneof:"Content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Proof) Reset() {
	*x = Proof{}
	mi := &file_biscuit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{4}
}

func (x *Proof) GetContent() isProof_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Proof) GetNextSecret() []byte {
	if x != nil {
		if x, ok := x.Content.(*Proof_NextSecret); ok {
			return x.NextSecret
		}
	}
	return nil
}

func (x *Proof) GetFinalSignature() []byte {
	if x != nil {
		if x, ok := x.Content.(*Proof_FinalSignature); ok {
			return x.FinalSignature
		}
	}
	return nil
}

type isProof_Content interface {
	isProof_Content()
}

type Proof_NextSecret struct {
	NextSecret []byte `protobuf:"bytes,1,opt,name=nextSecret,oneof"`
}

type Proof_FinalSignature struct {
	FinalSignature []byte `protobuf:"bytes,2,opt,name=finalSignature,oneof"`
}

func (*Proof_NextSecret) isProof_Content() {}

func (*Proof_FinalSignature) isProof_Content() {}

type Block struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbols       []string               `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	Context       *string                `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	Version       *uint32                `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Facts         []*Fact                `protobuf:"bytes,4,rep,name=facts" json:"facts,omitempty"`
	Rules         []*Rule                `protobuf:"bytes,5,rep,name=rules" json:"rules,omitempty"`
	Checks        []*Check               `protobuf:"bytes,6,rep,name=checks" json:"checks,omitempty"`
	Scope         []*Scope               `protobuf:"bytes,7,rep,name=scope" json:"scope,omitempty"`
	PublicKeys    []*PublicKey           `protobuf:"bytes,8,rep,name=publicKeys" json:"publicKeys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_biscuit_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{5}
}

func (x *Block) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *Block) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

func (x *Block) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Block) GetFacts() []*Fact {
	if x != nil {
		return x.Facts
	}
	return nil
}

func (x *Block) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Block) GetChecks() []*Check {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *Block) GetScope() []*Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Block) GetPublicKeys() []*PublicKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

type Scope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*Scope_ScopeType_
	//	*Scope_PublicKey
	Content       isScope_Content `protobuf_oneof:"Content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope) Reset() {
	*x = Scope{}
	mi := &file_biscuit_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{6}
}

func (x *Scope) GetContent() isScope_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Scope) GetScopeType() Scope_ScopeType {
	if x != nil {
		if x, ok := x.Content.(*Scope_ScopeType_); ok {
			return x.ScopeType
		}
	}
	return Scope_Authority
}

func (x *Scope) GetPublicKey() int64 {
	if x != nil {
		if x, ok := x.Content.(*Scope_PublicKey); ok {
			return x.PublicKey
		}
	}
	return 0
}

type isScope_Content interface {
	isScope_Content()
}

type Scope_ScopeType_ struct {
	ScopeType Scope_ScopeType `protobuf:"varint,1,opt,name=scopeType,enum=biscuit.format.schema.Scope_ScopeType,oneof"`
}

type Scope_PublicKey struct {
	PublicKey int64 `protobuf:"varint,2,opt,name=publicKey,oneof"`
}

func (*Scope_ScopeType_) isScope_Content() {}

func (*Scope_PublicKey) isScope_Content() {}

type Fact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Predicate     *Predicate             `protobuf:"bytes,1,req,name=predicate" json:"predicate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fact) Reset() {
	*x = Fact{}
	mi := &file_biscuit_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fact) ProtoMessage() {}

func (x *Fact) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fact.ProtoReflect.Descriptor instead.
func (*Fact) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{7}
}

func (x *Fact) GetPredicate() *Predicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *Predicate             `protobuf:"bytes,1,req,name=head" json:"head,omitempty"`
	Body          []*Predicate           `protobuf:"bytes,2,rep,name=body" json:"body,omitempty"`
	Expressions   []*Expression          `protobuf:"bytes,3,rep,name=expressions" json:"expressions,omitempty"`
	Scope         []*Scope               `protobuf:"bytes,4,rep,name=scope" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_biscuit_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{8}
}

func (x *Rule) GetHead() *Predicate {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *Rule) GetBody() []*Predicate {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Rule) GetExpressions() []*Expression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *Rule) GetScope() []*Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type Check struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*Rule                `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
	Kind          *Check_Kind            `protobuf:"varint,2,opt,name=kind,enum=biscuit.format.schema.Check_Kind" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Check) Reset() {
	*x = Check{}
	mi := &file_biscuit_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Check) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Check) ProtoMessage() {}

func (x *Check) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Check.ProtoReflect.Descriptor instead.
func (*Check) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{9}
}

func (x *Check) GetQueries() []*Rule {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Check) GetKind() Check_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Check_One
}

type Predicate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *uint64                `protobuf:"varint,1,req,name=name" json:"name,omitempty"`
	Terms         []*Term                `protobuf:"bytes,2,rep,name=terms" json:"terms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Predicate) Reset() {
	*x = Predicate{}
	mi := &file_biscuit_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Predicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Predicate) ProtoMessage() {}

func (x *Predicate) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Predicate.ProtoReflect.Descriptor instead.
func (*Predicate) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{10}
}

func (x *Predicate) GetName() uint64 {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return 0
}

func (x *Predicate) GetTerms() []*Term {
	if x != nil {
		return x.Terms
	}
	return nil
}

type Term struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*Term_Variable
	//	*Term_Integer
	//	*Term_String_
	//	*Term_Date
	//	*Term_Bytes
	//	*Term_Bool
	//	*Term_Set
	//	*Term_Null
	//	*Term_Array
	//	*Term_Map
	Content       isTerm_Content `protobuf_oneof:"Content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Term) Reset() {
	*x = Term{}
	mi := &file_biscuit_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Term) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Term) ProtoMessage() {}

func (x *Term) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Term.ProtoReflect.Descriptor instead.
func (*Term) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{11}
}

func (x *Term) GetContent() isTerm_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Term) GetVariable() uint32 {
	if x != nil {
		if x, ok := x.Content.(*Term_Variable); ok {
			return x.Variable
		}
	}
	return 0
}

func (x *Term) GetInteger() int64 {
	if x != nil {
		if x, ok := x.Content.(*Term_Integer); ok {
			return x.Integer
		}
	}
	return 0
}

func (x *Term) GetString_() uint64 {
	if x != nil {
		if x, ok := x.Content.(*Term_String_); ok {
			return x.String_
		}
	}
	return 0
}

func (x *Term) GetDate() uint64 {
	if x != nil {
		if x, ok := x.Content.(*Term_Date); ok {
			return x.Date
		}
	}
	return 0
}

func (x *Term) GetBytes() []byte {
	if x != nil {
		if x, ok := x.Content.(*Term_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *Term) GetBool() bool {
	if x != nil {
		if x, ok := x.Content.(*Term_Bool); ok {
			return x.Bool
		}
	}
	return false
}

func (x *Term) GetSet() *TermSet {
	if x != nil {
		if x, ok := x.Content.(*Term_Set); ok {
			return x.Set
		}
	}
	return nil
}

func (x *Term) GetNull() *Empty {
	if x != nil {
		if x, ok := x.Content.(*Term_Null); ok {
			return x.Null
		}
	}
	return nil
}

func (x *Term) GetArray() *Array {
	if x != nil {
		if x, ok := x.Content.(*Term_Array); ok {
			return x.Array
		}
	}
	return nil
}

func (x *Term) GetMap() *Map {
	if x != nil {
		if x, ok := x.Content.(*Term_Map); ok {
			return x.Map
		}
	}
	return nil
}

type isTerm_Content interface {
	isTerm_Content()
}

type Term_Variable struct {
	Variable uint32 `protobuf:"varint,1,opt,name=variable,oneof"`
}

type Term_Integer struct {
	Integer int64 `protobuf:"varint,2,opt,name=integer,oneof"`
}

type Term_String_ struct {
	String_ uint64 `protobuf:"varint,3,opt,name=string,oneof"`
}

type Term_Date struct {
	Date uint64 `protobuf:"varint,4,opt,name=date,oneof"`
}

type Term_Bytes struct {
	Bytes []byte `protobuf:"bytes,5,opt,name=bytes,oneof"`
}

type Term_Bool struct {
	Bool bool `protobuf:"varint,6,opt,name=bool,oneof"`
}

type Term_Set struct {
	Set *TermSet `protobuf:"bytes,7,opt,name=set,oneof"`
}

type Term_Null struct {
	Null *Empty `protobuf:"bytes,8,opt,name=null,oneof"`
}

type Term_Array struct {
	Array *Array `protobuf:"bytes,9,opt,name=array,oneof"`
}

type Term_Map struct {
	Map *Map `protobuf:"bytes,10,opt,name=map,oneof"`
}

func (*Term_Variable) isTerm_Content() {}

func (*Term_Integer) isTerm_Content() {}

func (*Term_String_) isTerm_Content() {}

func (*Term_Date) isTerm_Content() {}

func (*Term_Bytes) isTerm_Content() {}

func (*Term_Bool) isTerm_Content() {}

func (*Term_Set) isTerm_Content() {}

func (*Term_Null) isTerm_Content() {}

func (*Term_Array) isTerm_Content() {}

func (*Term_Map) isTerm_Content() {}

type TermSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Set           []*Term                `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TermSet) Reset() {
	*x = TermSet{}
	mi := &file_biscuit_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TermSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermSet) ProtoMessage() {}

func (x *TermSet) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermSet.ProtoReflect.Descriptor instead.
func (*TermSet) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{12}
}

func (x *TermSet) GetSet() []*Term {
	if x != nil {
		return x.Set
	}
	return nil
}

type Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Array         []*Term                `protobuf:"bytes,1,rep,name=array" json:"array,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Array) Reset() {
	*x = Array{}
	mi := &file_biscuit_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Array) ProtoMessage() {}

func (x *Array) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Array.ProtoReflect.Descriptor instead.
func (*Array) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{13}
}

func (x *Array) GetArray() []*Term {
	if x != nil {
		return x.Array
	}
	return nil
}

type Map struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*MapEntry            `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Map) Reset() {
	*x = Map{}
	mi := &file_biscuit_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{14}
}

func (x *Map) GetEntries() []*MapEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type MapEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *MapKey                `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value         *Term                  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapEntry) Reset() {
	*x = MapEntry{}
	mi := &file_biscuit_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapEntry) ProtoMessage() {}

func (x *MapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapEntry.ProtoReflect.Descriptor instead.
func (*MapEntry) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{15}
}

func (x *MapEntry) GetKey() *MapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MapEntry) GetValue() *Term {
	if x != nil {
		return x.Value
	}
	return nil
}

type MapKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*MapKey_Integer
	//	*MapKey_String_
	Content       isMapKey_Content `protobuf_oneof:"Content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapKey) Reset() {
	*x = MapKey{}
	mi := &file_biscuit_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKey) ProtoMessage() {}

func (x *MapKey) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKey.ProtoReflect.Descriptor instead.
func (*MapKey) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{16}
}

func (x *MapKey) GetContent() isMapKey_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *MapKey) GetInteger() int64 {
	if x != nil {
		if x, ok := x.Content.(*MapKey_Integer); ok {
			return x.Integer
		}
	}
	return 0
}

func (x *MapKey) GetString_() uint64 {
	if x != nil {
		if x, ok := x.Content.(*MapKey_String_); ok {
			return x.String_
		}
	}
	return 0
}

type isMapKey_Content interface {
	isMapKey_Content()
}

type MapKey_Integer struct {
	Integer int64 `protobuf:"varint,1,opt,name=integer,oneof"`
}

type MapKey_String_ struct {
	String_ uint64 `protobuf:"varint,2,opt,name=string,oneof"`
}

func (*MapKey_Integer) isMapKey_Content() {}

func (*MapKey_String_) isMapKey_Content() {}

type Expression struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ops           []*Op                  `protobuf:"bytes,1,rep,name=ops" json:"ops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expression) Reset() {
	*x = Expression{}
	mi := &file_biscuit_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{17}
}

func (x *Expression) GetOps() []*Op {
	if x != nil {
		return x.Ops
	}
	return nil
}

type Op struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*Op_Value
	//	*Op_Unary
	//	*Op_Binary
	//	*Op_Closure
	Content       isOp_Content `protobuf_oneof:"Content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Op) Reset() {
	*x = Op{}
	mi := &file_biscuit_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Op) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Op) ProtoMessage() {}

func (x *Op) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Op.ProtoReflect.Descriptor instead.
func (*Op) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{18}
}

func (x *Op) GetContent() isOp_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Op) GetValue() *Term {
	if x != nil {
		if x, ok := x.Content.(*Op_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *Op) GetUnary() *OpUnary {
	if x != nil {
		if x, ok := x.Content.(*Op_Unary); ok {
			return x.Unary
		}
	}
	return nil
}

func (x *Op) GetBinary() *OpBinary {
	if x != nil {
		if x, ok := x.Content.(*Op_Binary); ok {
			return x.Binary
		}
	}
	return nil
}

func (x *Op) GetClosure() *OpClosure {
	if x != nil {
		if x, ok := x.Content.(*Op_Closure); ok {
			return x.Closure
		}
	}
	return nil
}

type isOp_Content interface {
	isOp_Content()
}

type Op_Value struct {
	Value *Term `protobuf:"bytes,1,opt,name=value,oneof"`
}

type Op_Unary struct {
	Unary *OpUnary `protobuf:"bytes,2,opt,name=unary,oneof"`
}

type Op_Binary struct {
	Binary *OpBinary `protobuf:"bytes,3,opt,name=Binary,oneof"`
}

type Op_Closure struct {
	Closure *OpClosure `protobuf:"bytes,4,opt,name=closure,oneof"`
}

func (*Op_Value) isOp_Content() {}

func (*Op_Unary) isOp_Content() {}

func (*Op_Binary) isOp_Content() {}

func (*Op_Closure) isOp_Content() {}

type OpUnary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          *OpUnary_Kind          `protobuf:"varint,1,req,name=kind,enum=biscuit.format.schema.OpUnary_Kind" json:"kind,omitempty"`
	FfiName       *uint64                `protobuf:"varint,2,opt,name=ffiName" json:"ffiName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpUnary) Reset() {
	*x = OpUnary{}
	mi := &file_biscuit_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpUnary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpUnary) ProtoMessage() {}

func (x *OpUnary) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpUnary.ProtoReflect.Descriptor instead.
func (*OpUnary) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{19}
}

func (x *OpUnary) GetKind() OpUnary_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return OpUnary_Negate
}

func (x *OpUnary) GetFfiName() uint64 {
	if x != nil && x.FfiName != nil {
		return *x.FfiName
	}
	return 0
}

type OpBinary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          *OpBinary_Kind         `protobuf:"varint,1,req,name=kind,enum=biscuit.format.schema.OpBinary_Kind" json:"kind,omitempty"`
	FfiName       *uint64                `protobuf:"varint,2,opt,name=ffiName" json:"ffiName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpBinary) Reset() {
	*x = OpBinary{}
	mi := &file_biscuit_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpBinary) ProtoMessage() {}

func (x *OpBinary) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpBinary.ProtoReflect.Descriptor instead.
func (*OpBinary) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{20}
}

func (x *OpBinary) GetKind() OpBinary_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return OpBinary_LessThan
}

func (x *OpBinary) GetFfiName() uint64 {
	if x != nil && x.FfiName != nil {
		return *x.FfiName
	}
	return 0
}

type OpClosure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        []uint32               `protobuf:"varint,1,rep,name=params" json:"params,omitempty"`
	Ops           []*Op                  `protobuf:"bytes,2,rep,name=ops" json:"ops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpClosure) Reset() {
	*x = OpClosure{}
	mi := &file_biscuit_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpClosure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpClosure) ProtoMessage() {}

func (x *OpClosure) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpClosure.ProtoReflect.Descriptor instead.
func (*OpClosure) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{21}
}

func (x *OpClosure) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *OpClosure) GetOps() []*Op {
	if x != nil {
		return x.Ops
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*Rule                `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
	Kind          *Policy_Kind           `protobuf:"varint,2,req,name=kind,enum=biscuit.format.schema.Policy_Kind" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_biscuit_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{22}
}

func (x *Policy) GetQueries() []*Rule {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Policy) GetKind() Policy_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Policy_Allow
}

type AuthorizerPolicies struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbols       []string               `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	Version       *uint32                `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Facts         []*Fact                `protobuf:"bytes,3,rep,name=facts" json:"facts,omitempty"`
	Rules         []*Rule                `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
	Checks        []*Check               `protobuf:"bytes,5,rep,name=checks" json:"checks,omitempty"`
	Policies      []*Policy              `protobuf:"bytes,6,rep,name=policies" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizerPolicies) Reset() {
	*x = AuthorizerPolicies{}
	mi := &file_biscuit_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizerPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerPolicies) ProtoMessage() {}

func (x *AuthorizerPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerPolicies.ProtoReflect.Descriptor instead.
func (*AuthorizerPolicies) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{23}
}

func (x *AuthorizerPolicies) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *AuthorizerPolicies) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *AuthorizerPolicies) GetFacts() []*Fact {
	if x != nil {
		return x.Facts
	}
	return nil
}

func (x *AuthorizerPolicies) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *AuthorizerPolicies) GetChecks() []*Check {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *AuthorizerPolicies) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type ThirdPartyBlockRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LegacyPreviousKey *PublicKey             `protobuf:"bytes,1,opt,name=legacyPreviousKey" json:"legacyPreviousKey,omitempty"`
	LegacyPublicKeys  []*PublicKey           `protobuf:"bytes,2,rep,name=legacyPublicKeys" json:"legacyPublicKeys,omitempty"`
	PreviousSignature []byte                 `protobuf:"bytes,3,req,name=previousSignature" json:"previousSignature,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ThirdPartyBlockRequest) Reset() {
	*x = ThirdPartyBlockRequest{}
	mi := &file_biscuit_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyBlockRequest) ProtoMessage() {}

func (x *ThirdPartyBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyBlockRequest.ProtoReflect.Descriptor instead.
func (*ThirdPartyBlockRequest) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{24}
}

func (x *ThirdPartyBlockRequest) GetLegacyPreviousKey() *PublicKey {
	if x != nil {
		return x.LegacyPreviousKey
	}
	return nil
}

func (x *ThirdPartyBlockRequest) GetLegacyPublicKeys() []*PublicKey {
	if x != nil {
		return x.LegacyPublicKeys
	}
	return nil
}

func (x *ThirdPartyBlockRequest) GetPreviousSignature() []byte {
	if x != nil {
		return x.PreviousSignature
	}
	return nil
}

type ThirdPartyBlockContents struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Payload           []byte                 `protobuf:"bytes,1,req,name=payload" json:"payload,omitempty"`
	ExternalSignature *ExternalSignature     `protobuf:"bytes,2,req,name=externalSignature" json:"externalSignature,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ThirdPartyBlockContents) Reset() {
	*x = ThirdPartyBlockContents{}
	mi := &file_biscuit_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyBlockContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyBlockContents) ProtoMessage() {}

func (x *ThirdPartyBlockContents) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyBlockContents.ProtoReflect.Descriptor instead.
func (*ThirdPartyBlockContents) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{25}
}

func (x *ThirdPartyBlockContents) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ThirdPartyBlockContents) GetExternalSignature() *ExternalSignature {
	if x != nil {
		return x.ExternalSignature
	}
	return nil
}

type AuthorizerSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limits        *RunLimits             `protobuf:"bytes,1,req,name=limits" json:"limits,omitempty"`
	ExecutionTime *uint64                `protobuf:"varint,2,req,name=executionTime" json:"executionTime,omitempty"`
	World         *AuthorizerWorld       `protobuf:"bytes,3,req,name=world" json:"world,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizerSnapshot) Reset() {
	*x = AuthorizerSnapshot{}
	mi := &file_biscuit_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizerSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerSnapshot) ProtoMessage() {}

func (x *AuthorizerSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerSnapshot.ProtoReflect.Descriptor instead.
func (*AuthorizerSnapshot) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{26}
}

func (x *AuthorizerSnapshot) GetLimits() *RunLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *AuthorizerSnapshot) GetExecutionTime() uint64 {
	if x != nil && x.ExecutionTime != nil {
		return *x.ExecutionTime
	}
	return 0
}

func (x *AuthorizerSnapshot) GetWorld() *AuthorizerWorld {
	if x != nil {
		return x.World
	}
	return nil
}

type RunLimits struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxFacts      *uint64                `protobuf:"varint,1,req,name=maxFacts" json:"maxFacts,omitempty"`
	MaxIterations *uint64                `protobuf:"varint,2,req,name=maxIterations" json:"maxIterations,omitempty"`
	MaxTime       *uint64                `protobuf:"varint,3,req,name=maxTime" json:"maxTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunLimits) Reset() {
	*x = RunLimits{}
	mi := &file_biscuit_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLimits) ProtoMessage() {}

func (x *RunLimits) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLimits.ProtoReflect.Descriptor instead.
func (*RunLimits) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{27}
}

func (x *RunLimits) GetMaxFacts() uint64 {
	if x != nil && x.MaxFacts != nil {
		return *x.MaxFacts
	}
	return 0
}

func (x *RunLimits) GetMaxIterations() uint64 {
	if x != nil && x.MaxIterations != nil {
		return *x.MaxIterations
	}
	return 0
}

func (x *RunLimits) GetMaxTime() uint64 {
	if x != nil && x.MaxTime != nil {
		return *x.MaxTime
	}
	return 0
}

type AuthorizerWorld struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Version            *uint32                `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Symbols            []string               `protobuf:"bytes,2,rep,name=symbols" json:"symbols,omitempty"`
	PublicKeys         []*PublicKey           `protobuf:"bytes,3,rep,name=publicKeys" json:"publicKeys,omitempty"`
	Blocks             []*SnapshotBlock       `protobuf:"bytes,4,rep,name=blocks" json:"blocks,omitempty"`
	AuthorizerBlock    *SnapshotBlock         `protobuf:"bytes,5,req,name=authorizerBlock" json:"authorizerBlock,omitempty"`
	AuthorizerPolicies []*Policy              `protobuf:"bytes,6,rep,name=authorizerPolicies" json:"authorizerPolicies,omitempty"`
	GeneratedFacts     []*GeneratedFacts      `protobuf:"bytes,7,rep,name=generatedFacts" json:"generatedFacts,omitempty"`
	Iterations         *uint64                `protobuf:"varint,8,req,name=iterations" json:"iterations,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AuthorizerWorld) Reset() {
	*x = AuthorizerWorld{}
	mi := &file_biscuit_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizerWorld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizerWorld) ProtoMessage() {}

func (x *AuthorizerWorld) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizerWorld.ProtoReflect.Descriptor instead.
func (*AuthorizerWorld) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{28}
}

func (x *AuthorizerWorld) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *AuthorizerWorld) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *AuthorizerWorld) GetPublicKeys() []*PublicKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *AuthorizerWorld) GetBlocks() []*SnapshotBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *AuthorizerWorld) GetAuthorizerBlock() *SnapshotBlock {
	if x != nil {
		return x.AuthorizerBlock
	}
	return nil
}

func (x *AuthorizerWorld) GetAuthorizerPolicies() []*Policy {
	if x != nil {
		return x.AuthorizerPolicies
	}
	return nil
}

func (x *AuthorizerWorld) GetGeneratedFacts() []*GeneratedFacts {
	if x != nil {
		return x.GeneratedFacts
	}
	return nil
}

func (x *AuthorizerWorld) GetIterations() uint64 {
	if x != nil && x.Iterations != nil {
		return *x.Iterations
	}
	return 0
}

type Origin struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*Origin_Authorizer
	//	*Origin_Origin
	Content       isOrigin_Content `protobuf_oneof:"Content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Origin) Reset() {
	*x = Origin{}
	mi := &file_biscuit_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{29}
}

func (x *Origin) GetContent() isOrigin_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Origin) GetAuthorizer() *Empty {
	if x != nil {
		if x, ok := x.Content.(*Origin_Authorizer); ok {
			return x.Authorizer
		}
	}
	return nil
}

func (x *Origin) GetOrigin() uint32 {
	if x != nil {
		if x, ok := x.Content.(*Origin_Origin); ok {
			return x.Origin
		}
	}
	return 0
}

type isOrigin_Content interface {
	isOrigin_Content()
}

type Origin_Authorizer struct {
	Authorizer *Empty `protobuf:"bytes,1,opt,name=authorizer,oneof"`
}

type Origin_Origin struct {
	Origin uint32 `protobuf:"varint,2,opt,name=origin,oneof"`
}

func (*Origin_Authorizer) isOrigin_Content() {}

func (*Origin_Origin) isOrigin_Content() {}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_biscuit_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{30}
}

type GeneratedFacts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origins       []*Origin              `protobuf:"bytes,1,rep,name=origins" json:"origins,omitempty"`
	Facts         []*Fact                `protobuf:"bytes,2,rep,name=facts" json:"facts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneratedFacts) Reset() {
	*x = GeneratedFacts{}
	mi := &file_biscuit_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratedFacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratedFacts) ProtoMessage() {}

func (x *GeneratedFacts) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratedFacts.ProtoReflect.Descriptor instead.
func (*GeneratedFacts) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{31}
}

func (x *GeneratedFacts) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *GeneratedFacts) GetFacts() []*Fact {
	if x != nil {
		return x.Facts
	}
	return nil
}

type SnapshotBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Context       *string                `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Version       *uint32                `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Facts         []*Fact                `protobuf:"bytes,3,rep,name=facts" json:"facts,omitempty"`
	Rules         []*Rule                `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
	Checks        []*Check               `protobuf:"bytes,5,rep,name=checks" json:"checks,omitempty"`
	Scope         []*Scope               `protobuf:"bytes,6,rep,name=scope" json:"scope,omitempty"`
	ExternalKey   *PublicKey             `protobuf:"bytes,7,opt,name=externalKey" json:"externalKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotBlock) Reset() {
	*x = SnapshotBlock{}
	mi := &file_biscuit_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotBlock) ProtoMessage() {}

func (x *SnapshotBlock) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotBlock.ProtoReflect.Descriptor instead.
func (*SnapshotBlock) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{32}
}

func (x *SnapshotBlock) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

func (x *SnapshotBlock) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SnapshotBlock) GetFacts() []*Fact {
	if x != nil {
		return x.Facts
	}
	return nil
}

func (x *SnapshotBlock) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *SnapshotBlock) GetChecks() []*Check {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *SnapshotBlock) GetScope() []*Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *SnapshotBlock) GetExternalKey() *PublicKey {
	if x != nil {
		return x.ExternalKey
	}
	return nil
}

var File_biscuit_proto protoreflect.FileDescriptor

const file_biscuit_proto_rawDesc = "" +
	"\n" +
	"\rbiscuit.proto\x12\x15biscuit.format.schema\"\xd9\x01\n" +
	"\aBiscuit\x12\x1c\n" +
	"\trootKeyId\x18\x01 \x01(\rR\trootKeyId\x12@\n" +
	"\tauthority\x18\x02 \x02(\v2\".biscuit.format.schema.SignedBlockR\tauthority\x12:\n" +
	"\x06blocks\x18\x03 \x03(\v2\".biscuit.format.schema.SignedBlockR\x06blocks\x122\n" +
	"\x05proof\x18\x04 \x02(\v2\x1c.biscuit.format.schema.ProofR\x05proof\"\xef\x01\n" +
	"\vSignedBlock\x12\x14\n" +
	"\x05block\x18\x01 \x02(\fR\x05block\x12:\n" +
	"\anextKey\x18\x02 \x02(\v2 .biscuit.format.schema.PublicKeyR\anextKey\x12\x1c\n" +
	"\tsignature\x18\x03 \x02(\fR\tsignature\x12V\n" +
	"\x11externalSignature\x18\x04 \x01(\v2(.biscuit.format.schema.ExternalSignatureR\x11externalSignature\x12\x18\n" +
	"\aversion\x18\x05 \x01(\rR\aversion\"q\n" +
	"\x11ExternalSignature\x12\x1c\n" +
	"\tsignature\x18\x01 \x02(\fR\tsignature\x12>\n" +
	"\tpublicKey\x18\x02 \x02(\v2 .biscuit.format.schema.PublicKeyR\tpublicKey\"\x90\x01\n" +
	"\tPublicKey\x12H\n" +
	"\talgorithm\x18\x01 \x02(\x0e2*.biscuit.format.schema.PublicKey.AlgorithmR\talgorithm\x12\x10\n" +
	"\x03key\x18\x02 \x02(\fR\x03key\"'\n" +
	"\tAlgorithm\x12\v\n" +
	"\aEd25519\x10\x00\x12\r\n" +
	"\tSECP256R1\x10\x01\"^\n" +
	"\x05Proof\x12 \n" +
	"\n" +
	"nextSecret\x18\x01 \x01(\fH\x00R\n" +
	"nextSecret\x12(\n" +
	"\x0efinalSignature\x18\x02 \x01(\fH\x00R\x0efinalSignatureB\t\n" +
	"\aContent\"\xe7\x02\n" +
	"\x05Block\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\x12\x18\n" +
	"\acontext\x18\x02 \x01(\tR\acontext\x12\x18\n" +
	"\aversion\x18\x03 \x01(\rR\aversion\x121\n" +
	"\x05facts\x18\x04 \x03(\v2\x1b.biscuit.format.schema.FactR\x05facts\x121\n" +
	"\x05rules\x18\x05 \x03(\v2\x1b.biscuit.format.schema.RuleR\x05rules\x124\n" +
	"\x06checks\x18\x06 \x03(\v2\x1c.biscuit.format.schema.CheckR\x06checks\x122\n" +
	"\x05scope\x18\a \x03(\v2\x1c.biscuit.format.schema.ScopeR\x05scope\x12@\n" +
	"\n" +
	"publicKeys\x18\b \x03(\v2 .biscuit.format.schema.PublicKeyR\n" +
	"publicKeys\"\xa4\x01\n" +
	"\x05Scope\x12F\n" +
	"\tscopeType\x18\x01 \x01(\x0e2&.biscuit.format.schema.Scope.ScopeTypeH\x00R\tscopeType\x12\x1e\n" +
	"\tpublicKey\x18\x02 \x01(\x03H\x00R\tpublicKey\"(\n" +
	"\tScopeType\x12\r\n" +
	"\tAuthority\x10\x00\x12\f\n" +
	"\bPrevious\x10\x01B\t\n" +
	"\aContent\"F\n" +
	"\x04Fact\x12>\n" +
	"\tpredicate\x18\x01 \x02(\v2 .biscuit.format.schema.PredicateR\tpredicate\"\xeb\x01\n" +
	"\x04Rule\x124\n" +
	"\x04head\x18\x01 \x02(\v2 .biscuit.format.schema.PredicateR\x04head\x124\n" +
	"\x04body\x18\x02 \x03(\v2 .biscuit.format.schema.PredicateR\x04body\x12C\n" +
	"\vexpressions\x18\x03 \x03(\v2!.biscuit.format.schema.ExpressionR\vexpressions\x122\n" +
	"\x05scope\x18\x04 \x03(\v2\x1c.biscuit.format.schema.ScopeR\x05scope\"\x9b\x01\n" +
	"\x05Check\x125\n" +
	"\aqueries\x18\x01 \x03(\v2\x1b.biscuit.format.schema.RuleR\aqueries\x125\n" +
	"\x04kind\x18\x02 \x01(\x0e2!.biscuit.format.schema.Check.KindR\x04kind\"$\n" +
	"\x04Kind\x12\a\n" +
	"\x03One\x10\x00\x12\a\n" +
	"\x03All\x10\x01\x12\n" +
	"\n" +
	"\x06Reject\x10\x02\"R\n" +
	"\tPredicate\x12\x12\n" +
	"\x04name\x18\x01 \x02(\x04R\x04name\x121\n" +
	"\x05terms\x18\x02 \x03(\v2\x1b.biscuit.format.schema.TermR\x05terms\"\xf7\x02\n" +
	"\x04Term\x12\x1c\n" +
	"\bvariable\x18\x01 \x01(\rH\x00R\bvariable\x12\x1a\n" +
	"\ainteger\x18\x02 \x01(\x03H\x00R\ainteger\x12\x18\n" +
	"\x06string\x18\x03 \x01(\x04H\x00R\x06string\x12\x14\n" +
	"\x04date\x18\x04 \x01(\x04H\x00R\x04date\x12\x16\n" +
	"\x05bytes\x18\x05 \x01(\fH\x00R\x05bytes\x12\x14\n" +
	"\x04bool\x18\x06 \x01(\bH\x00R\x04bool\x122\n" +
	"\x03set\x18\a \x01(\v2\x1e.biscuit.format.schema.TermSetH\x00R\x03set\x122\n" +
	"\x04null\x18\b \x01(\v2\x1c.biscuit.format.schema.EmptyH\x00R\x04null\x124\n" +
	"\x05array\x18\t \x01(\v2\x1c.biscuit.format.schema.ArrayH\x00R\x05array\x12.\n" +
	"\x03map\x18\n" +
	" \x01(\v2\x1a.biscuit.format.schema.MapH\x00R\x03mapB\t\n" +
	"\aContent\"8\n" +
	"\aTermSet\x12-\n" +
	"\x03set\x18\x01 \x03(\v2\x1b.biscuit.format.schema.TermR\x03set\":\n" +
	"\x05Array\x121\n" +
	"\x05array\x18\x01 \x03(\v2\x1b.biscuit.format.schema.TermR\x05array\"@\n" +
	"\x03Map\x129\n" +
	"\aentries\x18\x01 \x03(\v2\x1f.biscuit.format.schema.MapEntryR\aentries\"n\n" +
	"\bMapEntry\x12/\n" +
	"\x03key\x18\x01 \x02(\v2\x1d.biscuit.format.schema.MapKeyR\x03key\x121\n" +
	"\x05value\x18\x02 \x02(\v2\x1b.biscuit.format.schema.TermR\x05value\"I\n" +
	"\x06MapKey\x12\x1a\n" +
	"\ainteger\x18\x01 \x01(\x03H\x00R\ainteger\x12\x18\n" +
	"\x06string\x18\x02 \x01(\x04H\x00R\x06stringB\t\n" +
	"\aContent\"9\n" +
	"\n" +
	"Expression\x12+\n" +
	"\x03ops\x18\x01 \x03(\v2\x19.biscuit.format.schema.OpR\x03ops\"\xf5\x01\n" +
	"\x02Op\x123\n" +
	"\x05value\x18\x01 \x01(\v2\x1b.biscuit.format.schema.TermH\x00R\x05value\x126\n" +
	"\x05unary\x18\x02 \x01(\v2\x1e.biscuit.format.schema.OpUnaryH\x00R\x05unary\x129\n" +
	"\x06Binary\x18\x03 \x01(\v2\x1f.biscuit.format.schema.OpBinaryH\x00R\x06Binary\x12<\n" +
	"\aclosure\x18\x04 \x01(\v2 .biscuit.format.schema.OpClosureH\x00R\aclosureB\t\n" +
	"\aContent\"\x9d\x01\n" +
	"\aOpUnary\x127\n" +
	"\x04kind\x18\x01 \x02(\x0e2#.biscuit.format.schema.OpUnary.KindR\x04kind\x12\x18\n" +
	"\affiName\x18\x02 \x01(\x04R\affiName\"?\n" +
	"\x04Kind\x12\n" +
	"\n" +
	"\x06Negate\x10\x00\x12\n" +
	"\n" +
	"\x06Parens\x10\x01\x12\n" +
	"\n" +
	"\x06Length\x10\x02\x12\n" +
	"\n" +
	"\x06TypeOf\x10\x03\x12\a\n" +
	"\x03Ffi\x10\x04\"\xf1\x03\n" +
	"\bOpBinary\x128\n" +
	"\x04kind\x18\x01 \x02(\x0e2$.biscuit.format.schema.OpBinary.KindR\x04kind\x12\x18\n" +
	"\affiName\x18\x02 \x01(\x04R\affiName\"\x90\x03\n" +
	"\x04Kind\x12\f\n" +
	"\bLessThan\x10\x00\x12\x0f\n" +
	"\vGreaterThan\x10\x01\x12\x0f\n" +
	"\vLessOrEqual\x10\x02\x12\x12\n" +
	"\x0eGreaterOrEqual\x10\x03\x12\t\n" +
	"\x05Equal\x10\x04\x12\f\n" +
	"\bContains\x10\x05\x12\n" +
	"\n" +
	"\x06Prefix\x10\x06\x12\n" +
	"\n" +
	"\x06Suffix\x10\a\x12\t\n" +
	"\x05Regex\x10\b\x12\a\n" +
	"\x03Add\x10\t\x12\a\n" +
	"\x03Sub\x10\n" +
	"\x12\a\n" +
	"\x03Mul\x10\v\x12\a\n" +
	"\x03Div\x10\f\x12\a\n" +
	"\x03And\x10\r\x12\x06\n" +
	"\x02Or\x10\x0e\x12\x10\n" +
	"\fIntersection\x10\x0f\x12\t\n" +
	"\x05Union\x10\x10\x12\x0e\n" +
	"\n" +
	"BitwiseAnd\x10\x11\x12\r\n" +
	"\tBitwiseOr\x10\x12\x12\x0e\n" +
	"\n" +
	"BitwiseXor\x10\x13\x12\f\n" +
	"\bNotEqual\x10\x14\x12\x16\n" +
	"\x12HeterogeneousEqual\x10\x15\x12\x19\n" +
	"\x15HeterogeneousNotEqual\x10\x16\x12\v\n" +
	"\aLazyAnd\x10\x17\x12\n" +
	"\n" +
	"\x06LazyOr\x10\x18\x12\a\n" +
	"\x03All\x10\x19\x12\a\n" +
	"\x03Any\x10\x1a\x12\a\n" +
	"\x03Get\x10\x1b\x12\a\n" +
	"\x03Ffi\x10\x1c\x12\t\n" +
	"\x05TryOr\x10\x1d\"P\n" +
	"\tOpClosure\x12\x16\n" +
	"\x06params\x18\x01 \x03(\rR\x06params\x12+\n" +
	"\x03ops\x18\x02 \x03(\v2\x19.biscuit.format.schema.OpR\x03ops\"\x94\x01\n" +
	"\x06Policy\x125\n" +
	"\aqueries\x18\x01 \x03(\v2\x1b.biscuit.format.schema.RuleR\aqueries\x126\n" +
	"\x04kind\x18\x02 \x02(\x0e2\".biscuit.format.schema.Policy.KindR\x04kind\"\x1b\n" +
	"\x04Kind\x12\t\n" +
	"\x05Allow\x10\x00\x12\b\n" +
	"\x04Deny\x10\x01\"\x9f\x02\n" +
	"\x12AuthorizerPolicies\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\x12\x18\n" +
	"\aversion\x18\x02 \x01(\rR\aversion\x121\n" +
	"\x05facts\x18\x03 \x03(\v2\x1b.biscuit.format.schema.FactR\x05facts\x121\n" +
	"\x05rules\x18\x04 \x03(\v2\x1b.biscuit.format.schema.RuleR\x05rules\x124\n" +
	"\x06checks\x18\x05 \x03(\v2\x1c.biscuit.format.schema.CheckR\x06checks\x129\n" +
	"\bpolicies\x18\x06 \x03(\v2\x1d.biscuit.format.schema.PolicyR\bpolicies\"\xe4\x01\n" +
	"\x16ThirdPartyBlockRequest\x12N\n" +
	"\x11legacyPreviousKey\x18\x01 \x01(\v2 .biscuit.format.schema.PublicKeyR\x11legacyPreviousKey\x12L\n" +
	"\x10legacyPublicKeys\x18\x02 \x03(\v2 .biscuit.format.schema.PublicKeyR\x10legacyPublicKeys\x12,\n" +
	"\x11previousSignature\x18\x03 \x02(\fR\x11previousSignature\"\x8b\x01\n" +
	"\x17ThirdPartyBlockContents\x12\x18\n" +
	"\apayload\x18\x01 \x02(\fR\apayload\x12V\n" +
	"\x11externalSignature\x18\x02 \x02(\v2(.biscuit.format.schema.ExternalSignatureR\x11externalSignature\"\xb2\x01\n" +
	"\x12AuthorizerSnapshot\x128\n" +
	"\x06limits\x18\x01 \x02(\v2 .biscuit.format.schema.RunLimitsR\x06limits\x12$\n" +
	"\rexecutionTime\x18\x02 \x02(\x04R\rexecutionTime\x12<\n" +
	"\x05world\x18\x03 \x02(\v2&.biscuit.format.schema.AuthorizerWorldR\x05world\"g\n" +
	"\tRunLimits\x12\x1a\n" +
	"\bmaxFacts\x18\x01 \x02(\x04R\bmaxFacts\x12$\n" +
	"\rmaxIterations\x18\x02 \x02(\x04R\rmaxIterations\x12\x18\n" +
	"\amaxTime\x18\x03 \x02(\x04R\amaxTime\"\xd3\x03\n" +
	"\x0fAuthorizerWorld\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12\x18\n" +
	"\asymbols\x18\x02 \x03(\tR\asymbols\x12@\n" +
	"\n" +
	"publicKeys\x18\x03 \x03(\v2 .biscuit.format.schema.PublicKeyR\n" +
	"publicKeys\x12<\n" +
	"\x06blocks\x18\x04 \x03(\v2$.biscuit.format.schema.SnapshotBlockR\x06blocks\x12N\n" +
	"\x0fauthorizerBlock\x18\x05 \x02(\v2$.biscuit.format.schema.SnapshotBlockR\x0fauthorizerBlock\x12M\n" +
	"\x12authorizerPolicies\x18\x06 \x03(\v2\x1d.biscuit.format.schema.PolicyR\x12authorizerPolicies\x12M\n" +
	"\x0egeneratedFacts\x18\a \x03(\v2%.biscuit.format.schema.GeneratedFactsR\x0egeneratedFacts\x12\x1e\n" +
	"\n" +
	"iterations\x18\b \x02(\x04R\n" +
	"iterations\"m\n" +
	"\x06Origin\x12>\n" +
	"\n" +
	"authorizer\x18\x01 \x01(\v2\x1c.biscuit.format.schema.EmptyH\x00R\n" +
	"authorizer\x12\x18\n" +
	"\x06origin\x18\x02 \x01(\rH\x00R\x06originB\t\n" +
	"\aContent\"\a\n" +
	"\x05Empty\"|\n" +
	"\x0eGeneratedFacts\x127\n" +
	"\aorigins\x18\x01 \x03(\v2\x1d.biscuit.format.schema.OriginR\aorigins\x121\n" +
	"\x05facts\x18\x02 \x03(\v2\x1b.biscuit.format.schema.FactR\x05facts\"\xd7\x02\n" +
	"\rSnapshotBlock\x12\x18\n" +
	"\acontext\x18\x01 \x01(\tR\acontext\x12\x18\n" +
	"\aversion\x18\x02 \x01(\rR\aversion\x121\n" +
	"\x05facts\x18\x03 \x03(\v2\x1b.biscuit.format.schema.FactR\x05facts\x121\n" +
	"\x05rules\x18\x04 \x03(\v2\x1b.biscuit.format.schema.RuleR\x05rules\x124\n" +
	"\x06checks\x18\x05 \x03(\v2\x1c.biscuit.format.schema.CheckR\x06checks\x122\n" +
	"\x05scope\x18\x06 \x03(\v2\x1c.biscuit.format.schema.ScopeR\x05scope\x12B\n" +
	"\vexternalKey\x18\a \x01(\v2 .biscuit.format.schema.PublicKeyR\vexternalKeyB\x06Z\x04.;pb"

var (
	file_biscuit_proto_rawDescOnce sync.Once
	file_biscuit_proto_rawDescData []byte
)

func file_biscuit_proto_rawDescGZIP() []byte {
	file_biscuit_proto_rawDescOnce.Do(func() {
		file_biscuit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_biscuit_proto_rawDesc), len(file_biscuit_proto_rawDesc)))
	})
	return file_biscuit_proto_rawDescData
}

var file_biscuit_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_biscuit_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_biscuit_proto_goTypes = []any{
	(PublicKey_Algorithm)(0),        // 0: biscuit.format.schema.PublicKey.Algorithm
	(Scope_ScopeType)(0),            // 1: biscuit.format.schema.Scope.ScopeType
	(Check_Kind)(0),                 // 2: biscuit.format.schema.Check.Kind
	(OpUnary_Kind)(0),               // 3: biscuit.format.schema.OpUnary.Kind
	(OpBinary_Kind)(0),              // 4: biscuit.format.schema.OpBinary.Kind
	(Policy_Kind)(0),                // 5: biscuit.format.schema.Policy.Kind
	(*Biscuit)(nil),                 // 6: biscuit.format.schema.Biscuit
	(*SignedBlock)(nil),             // 7: biscuit.format.schema.SignedBlock
	(*ExternalSignature)(nil),       // 8: biscuit.format.schema.ExternalSignature
	(*PublicKey)(nil),               // 9: biscuit.format.schema.PublicKey
	(*Proof)(nil),                   // 10: biscuit.format.schema.Proof
	(*Block)(nil),                   // 11: biscuit.format.schema.Block
	(*Scope)(nil),                   // 12: biscuit.format.schema.Scope
	(*Fact)(nil),                    // 13: biscuit.format.schema.Fact
	(*Rule)(nil),                    // 14: biscuit.format.schema.Rule
	(*Check)(nil),                   // 15: biscuit.format.schema.Check
	(*Predicate)(nil),               // 16: biscuit.format.schema.Predicate
	(*Term)(nil),                    // 17: biscuit.format.schema.Term
	(*TermSet)(nil),                 // 18: biscuit.format.schema.TermSet
	(*Array)(nil),                   // 19: biscuit.format.schema.Array
	(*Map)(nil),                     // 20: biscuit.format.schema.Map
	(*MapEntry)(nil),                // 21: biscuit.format.schema.MapEntry
	(*MapKey)(nil),                  // 22: biscuit.format.schema.MapKey
	(*Expression)(nil),              // 23: biscuit.format.schema.Expression
	(*Op)(nil),                      // 24: biscuit.format.schema.Op
	(*OpUnary)(nil),                 // 25: biscuit.format.schema.OpUnary
	(*OpBinary)(nil),                // 26: biscuit.format.schema.OpBinary
	(*OpClosure)(nil),               // 27: biscuit.format.schema.OpClosure
	(*Policy)(nil),                  // 28: biscuit.format.schema.Policy
	(*AuthorizerPolicies)(nil),      // 29: biscuit.format.schema.AuthorizerPolicies
	(*ThirdPartyBlockRequest)(nil),  // 30: biscuit.format.schema.ThirdPartyBlockRequest
	(*ThirdPartyBlockContents)(nil), // 31: biscuit.format.schema.ThirdPartyBlockContents
	(*AuthorizerSnapshot)(nil),      // 32: biscuit.format.schema.AuthorizerSnapshot
	(*RunLimits)(nil),               // 33: biscuit.format.schema.RunLimits
	(*AuthorizerWorld)(nil),         // 34: biscuit.format.schema.AuthorizerWorld
	(*Origin)(nil),                  // 35: biscuit.format.schema.Origin
	(*Empty)(nil),                   // 36: biscuit.format.schema.Empty
	(*GeneratedFacts)(nil),          // 37: biscuit.format.schema.GeneratedFacts
	(*SnapshotBlock)(nil),           // 38: biscuit.format.schema.SnapshotBlock
}
var file_biscuit_proto_depIdxs = []int32{
	7,  // 0: biscuit.format.schema.Biscuit.authority:type_name -> biscuit.format.schema.SignedBlock
	7,  // 1: biscuit.format.schema.Biscuit.blocks:type_name -> biscuit.format.schema.SignedBlock
	10, // 2: biscuit.format.schema.Biscuit.proof:type_name -> biscuit.format.schema.Proof
	9,  // 3: biscuit.format.schema.SignedBlock.nextKey:type_name -> biscuit.format.schema.PublicKey
	8,  // 4: biscuit.format.schema.SignedBlock.externalSignature:type_name -> biscuit.format.schema.ExternalSignature
	9,  // 5: biscuit.format.schema.ExternalSignature.publicKey:type_name -> biscuit.format.schema.PublicKey
	0,  // 6: biscuit.format.schema.PublicKey.algorithm:type_name -> biscuit.format.schema.PublicKey.Algorithm
	13, // 7: biscuit.format.schema.Block.facts:type_name -> biscuit.format.schema.Fact
	14, // 8: biscuit.format.schema.Block.rules:type_name -> biscuit.format.schema.Rule
	15, // 9: biscuit.format.schema.Block.checks:type_name -> biscuit.format.schema.Check
	12, // 10: biscuit.format.schema.Block.scope:type_name -> biscuit.format.schema.Scope
	9,  // 11: biscuit.format.schema.Block.publicKeys:type_name -> biscuit.format.schema.PublicKey
	1,  // 12: biscuit.format.schema.Scope.scopeType:type_name -> biscuit.format.schema.Scope.ScopeType
	16, // 13: biscuit.format.schema.Fact.predicate:type_name -> biscuit.format.schema.Predicate
	16, // 14: biscuit.format.schema.Rule.head:type_name -> biscuit.format.schema.Predicate
	16, // 15: biscuit.format.schema.Rule.body:type_name -> biscuit.format.schema.Predicate
	23, // 16: biscuit.format.schema.Rule.expressions:type_name -> biscuit.format.schema.Expression
	12, // 17: biscuit.format.schema.Rule.scope:type_name -> biscuit.format.schema.Scope
	14, // 18: biscuit.format.schema.Check.queries:type_name -> biscuit.format.schema.Rule
	2,  // 19: biscuit.format.schema.Check.kind:type_name -> biscuit.format.schema.Check.Kind
	17, // 20: biscuit.format.schema.Predicate.terms:type_name -> biscuit.format.schema.Term
	18, // 21: biscuit.format.schema.Term.set:type_name -> biscuit.format.schema.TermSet
	36, // 22: biscuit.format.schema.Term.null:type_name -> biscuit.format.schema.Empty
	19, // 23: biscuit.format.schema.Term.array:type_name -> biscuit.format.schema.Array
	20, // 24: biscuit.format.schema.Term.map:type_name -> biscuit.format.schema.Map
	17, // 25: biscuit.format.schema.TermSet.set:type_name -> biscuit.format.schema.Term
	17, // 26: biscuit.format.schema.Array.array:type_name -> biscuit.format.schema.Term
	21, // 27: biscuit.format.schema.Map.entries:type_name -> biscuit.format.schema.MapEntry
	22, // 28: biscuit.format.schema.MapEntry.key:type_name -> biscuit.format.schema.MapKey
	17, // 29: biscuit.format.schema.MapEntry.value:type_name -> biscuit.format.schema.Term
	24, // 30: biscuit.format.schema.Expression.ops:type_name -> biscuit.format.schema.Op
	17, // 31: biscuit.format.schema.Op.value:type_name -> biscuit.format.schema.Term
	25, // 32: biscuit.format.schema.Op.unary:type_name -> biscuit.format.schema.OpUnary
	26, // 33: biscuit.format.schema.Op.Binary:type_name -> biscuit.format.schema.OpBinary
	27, // 34: biscuit.format.schema.Op.closure:type_name -> biscuit.format.schema.OpClosure
	3,  // 35: biscuit.format.schema.OpUnary.kind:type_name -> biscuit.format.schema.OpUnary.Kind
	4,  // 36: biscuit.format.schema.OpBinary.kind:type_name -> biscuit.format.schema.OpBinary.Kind
	24, // 37: biscuit.format.schema.OpClosure.ops:type_name -> biscuit.format.schema.Op
	14, // 38: biscuit.format.schema.Policy.queries:type_name -> biscuit.format.schema.Rule
	5,  // 39: biscuit.format.schema.Policy.kind:type_name -> biscuit.format.schema.Policy.Kind
	13, // 40: biscuit.format.schema.AuthorizerPolicies.facts:type_name -> biscuit.format.schema.Fact
	14, // 41: biscuit.format.schema.AuthorizerPolicies.rules:type_name -> biscuit.format.schema.Rule
	15, // 42: biscuit.format.schema.AuthorizerPolicies.checks:type_name -> biscuit.format.schema.Check
	28, // 43: biscuit.format.schema.AuthorizerPolicies.policies:type_name -> biscuit.format.schema.Policy
	9,  // 44: biscuit.format.schema.ThirdPartyBlockRequest.legacyPreviousKey:type_name -> biscuit.format.schema.PublicKey
	9,  // 45: biscuit.format.schema.ThirdPartyBlockRequest.legacyPublicKeys:type_name -> biscuit.format.schema.PublicKey
	8,  // 46: biscuit.format.schema.ThirdPartyBlockContents.externalSignature:type_name -> biscuit.format.schema.ExternalSignature
	33, // 47: biscuit.format.schema.AuthorizerSnapshot.limits:type_name -> biscuit.format.schema.RunLimits
	34, // 48: biscuit.format.schema.AuthorizerSnapshot.world:type_name -> biscuit.format.schema.AuthorizerWorld
	9,  // 49: biscuit.format.schema.AuthorizerWorld.publicKeys:type_name -> biscuit.format.schema.PublicKey
	38, // 50: biscuit.format.schema.AuthorizerWorld.blocks:type_name -> biscuit.format.schema.SnapshotBlock
	38, // 51: biscuit.format.schema.AuthorizerWorld.authorizerBlock:type_name -> biscuit.format.schema.SnapshotBlock
	28, // 52: biscuit.format.schema.AuthorizerWorld.authorizerPolicies:type_name -> biscuit.format.schema.Policy
	37, // 53: biscuit.format.schema.AuthorizerWorld.generatedFacts:type_name -> biscuit.format.schema.GeneratedFacts
	36, // 54: biscuit.format.schema.Origin.authorizer:type_name -> biscuit.format.schema.Empty
	35, // 55: biscuit.format.schema.GeneratedFacts.origins:type_name -> biscuit.format.schema.Origin
	13, // 56: biscuit.format.schema.GeneratedFacts.facts:type_name -> biscuit.format.schema.Fact
	13, // 57: biscuit.format.schema.SnapshotBlock.facts:type_name -> biscuit.format.schema.Fact
	14, // 58: biscuit.format.schema.SnapshotBlock.rules:type_name -> biscuit.format.schema.Rule
	15, // 59: biscuit.format.schema.SnapshotBlock.checks:type_name -> biscuit.format.schema.Check
	12, // 60: biscuit.format.schema.SnapshotBlock.scope:type_name -> biscuit.format.schema.Scope
	9,  // 61: biscuit.format.schema.SnapshotBlock.externalKey:type_name -> biscuit.format.schema.PublicKey
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_biscuit_proto_init() }
func file_biscuit_proto_init() {
	if File_biscuit_proto != nil {
		return
	}
	file_biscuit_proto_msgTypes[4].OneofWrappers = []any{
		(*Proof_NextSecret)(nil),
		(*Proof_FinalSignature)(nil),
	}
	file_biscuit_proto_msgTypes[6].OneofWrappers = []any{
		(*Scope_ScopeType_)(nil),
		(*Scope_PublicKey)(nil),
	}
	file_biscuit_proto_msgTypes[11].OneofWrappers = []any{
		(*Term_Variable)(nil),
		(*Term_Integer)(nil),
		(*Term_String_)(nil),
		(*Term_Date)(nil),
		(*Term_Bytes)(nil),
		(*Term_Bool)(nil),
		(*Term_Set)(nil),
		(*Term_Null)(nil),
		(*Term_Array)(nil),
		(*Term_Map)(nil),
	}
	file_biscuit_proto_msgTypes[16].OneofWrappers = []any{
		(*MapKey_Integer)(nil),
		(*MapKey_String_)(nil),
	}
	file_biscuit_proto_msgTypes[18].OneofWrappers = []any{
		(*Op_Value)(nil),
		(*Op_Unary)(nil),
		(*Op_Binary)(nil),
		(*Op_Closure)(nil),
	}
	file_biscuit_proto_msgTypes[29].OneofWrappers = []any{
		(*Origin_Authorizer)(nil),
		(*Origin_Origin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_biscuit_proto_rawDesc), len(file_biscuit_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_biscuit_proto_goTypes,
		DependencyIndexes: file_biscuit_proto_depIdxs,
		EnumInfos:         file_biscuit_proto_enumTypes,
		MessageInfos:      file_biscuit_proto_msgTypes,
	}.Build()
	File_biscuit_proto = out.File
	file_biscuit_proto_goTypes = nil
	file_biscuit_proto_depIdxs = nil
}
